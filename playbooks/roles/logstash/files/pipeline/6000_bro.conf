filter {
  if "bro" in [tags] {
    # Bro logs have a high quality timestamp, so let's copy that to @timestamp.
    # Before we do, let's copy the existing logstash @timestamp to timestamp.
    mutate {
      add_field => { "logstash_timestamp" => "%{@timestamp}" }
    }
    mutate {
      convert => { "logstash_timestamp" => "string" }
    }
    mutate {
      convert => { "timestamp" => "string" }
    }
    # New Bro JSON logs use ISO8601 timestamps.
    # Old Bro TSV logs use UNIX timestamps.
    date {
      match => [ "timestamp", "ISO8601", "UNIX" ]
    }
    mutate {
      rename => { "logstash_timestamp" => "timestamp" }
    }

    # I renamed conn_uids to uid so that it is easy to pivot to all things tied to a connection
    mutate {
       rename => [ "connection_uids", "uid" ]
    }

    # I recommend changing the field types below to integer or floats so searches can do greater than or less than
    # and also so math functions can be ran against them
    mutate {
      convert => [ "bound_port", "integer" ]
      convert => [ "data_channel_destination_port", "integer" ]
      convert => [ "destination_port", "integer" ]
      convert => [ "depth", "integer" ]
      #convert => [ "duration", "float" ]
      convert => [ "info_code", "integer" ]
      convert => [ "missed_bytes", "integer" ]
      convert => [ "missing_bytes", "integer" ]
      convert => [ "n", "integer" ]
      convert => [ "original_bytes", "integer" ]
      convert => [ "original_packets", "integer" ]
      convert => [ "original_ip_bytes", "integer" ]
      convert => [ "overflow_bytes", "integer" ]
      convert => [ "p", "integer" ]
      convert => [ "query_class", "integer" ]
      convert => [ "query_type", "integer" ]
      convert => [ "rcode", "integer" ]
      convert => [ "request_body_length", "integer" ]
      convert => [ "request_port", "integer" ]
      convert => [ "respond_bytes", "integer" ]
      convert => [ "respond_packets", "integer" ]
      convert => [ "respond_ip_bytes", "integer" ]
      convert => [ "response_body_length", "integer" ]
      convert => [ "seen_bytes", "integer" ]
      convert => [ "source_port", "integer" ]
      convert => [ "status_code", "integer" ]
      #convert => [ "suppress_for", "float" ]
      convert => [ "total_bytes", "integer" ]
      convert => [ "trans_depth", "integer" ]
      convert => [ "transaction_id", "integer" ]
      # convert the following boolean to text for now
      convert => [ "local_respond", "string" ]
      convert => [ "tc", "string" ]
      convert => [ "is_orig", "string" ]
      convert => [ "local_orig", "string" ]
      lowercase => [ "query" ]
      #remove_field => [ "timestamp" ]
    }

    # Combine OriginalBytes and RespondBytes and save the value to total_bytes
    if [original_bytes] and [respond_bytes] {
      ruby {
        code => "event.set('total_bytes', event.get('original_bytes') + event.get('respond_bytes'))"
      }
    }
  }
}
